<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.fx</groupId>
    <artifactId>Tetris</artifactId>
    <version>1.0-SNAPSHOT</version>
    <name>Tetris</name>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <junit.version>5.8.2</junit.version>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-controls</artifactId>
            <version>19-ea+7</version>
        </dependency>
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-fxml</artifactId>
            <version>19-ea+7</version>
        </dependency>
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-media</artifactId>
            <version>19-ea+7</version>
        </dependency>
        <dependency>
            <groupId>com.github.almasb</groupId>
            <artifactId>fxgl</artifactId>
            <version>17.1</version>
            <exclusions>
                <exclusion>
                    <groupId>org.openjfx</groupId>
                    <artifactId>*</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
            <version>${junit.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-engine</artifactId>
            <version>${junit.version}</version>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.10.1</version>
                <configuration>
                    <source>19</source>
                    <target>19</target>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.openjfx</groupId>
                <artifactId>javafx-maven-plugin</artifactId>
                <version>0.0.8</version>
                <executions>
                    <execution>
                        <!-- Default configuration for running with: mvn clean javafx:run -->
                        <id>default-cli</id>
                        <configuration>
                            <mainClass>com.fx.javafxdemo.HelloApplication</mainClass>
                            <launcher>app</launcher>
                            <jlinkZipName>app</jlinkZipName>
                            <jlinkImageName>app</jlinkImageName>
                            <noManPages>true</noManPages>
                            <stripDebug>true</stripDebug>
                            <noHeaderFiles>true</noHeaderFiles>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

<!--            <plugin>-->
<!--                <groupId>org.apache.maven.plugins</groupId>-->
<!--                <artifactId>maven-dependency-plugin</artifactId>-->
<!--                <configuration>-->
<!--                    <outputDirectory>${project.build.directory}/libs</outputDirectory>-->
<!--                    <excludeTransitive>false</excludeTransitive> &lt;!&ndash; 表示是否不包含间接依赖的包 &ndash;&gt;-->
<!--                    <stripVersion>false</stripVersion> &lt;!&ndash; 去除版本信息 &ndash;&gt;-->
<!--                </configuration>-->

<!--                <executions>-->
<!--                    <execution>-->
<!--                        <id>copy-dependencies</id>-->
<!--                        <phase>package</phase>-->
<!--                        <goals>-->
<!--                            <goal>copy-dependencies</goal>-->
<!--                        </goals>-->
<!--                        <configuration>-->
<!--                            &lt;!&ndash; 拷贝项目依赖包到libs/目录下 &ndash;&gt;-->
<!--                            <outputDirectory>${project.build.directory}/install/libs</outputDirectory>-->
<!--                            <excludeTransitive>false</excludeTransitive>-->
<!--                            <stripVersion>false</stripVersion>-->
<!--                        </configuration>-->
<!--                    </execution>-->
<!--                </executions>-->
<!--            </plugin>-->
<!--                <plugin>-->
<!--                    <groupId>com.zenjava</groupId>-->
<!--                    <artifactId>javafx-maven-plugin</artifactId>-->
<!--                    <version>8.8.3</version>-->
<!--                    <configuration>-->
<!--                        <vendor>liu</vendor>-->
<!--                        <mainClass>com.fx.javafxdemo.HelloApplication</mainClass>-->
<!--                    </configuration>-->
<!--                </plugin>-->
            <!-- 设置jar的入口类 -->
            <!-- 打包插件 -->
<!--            <plugin>-->
<!--                <groupId>org.apache.maven.plugins</groupId>-->
<!--                <artifactId>maven-jar-plugin</artifactId>-->
<!--                <version>3.0.2</version>-->
<!--                <configuration>-->
<!--                    <archive>-->
<!--                        &lt;!&ndash; 生成MANIFEST.MF的设置 &ndash;&gt;-->
<!--                        <manifest>-->
<!--                            &lt;!&ndash; 为依赖包添加路径, 这些路径会写在MANIFEST文件的Class-Path下 &ndash;&gt;-->
<!--                            <addClasspath>true</addClasspath>-->
<!--                            <classpathPrefix>libs/</classpathPrefix>-->
<!--                            &lt;!&ndash; jar启动入口类，这个需要修改&ndash;&gt;-->
<!--                            <mainClass>com.fx.javafxdemo.HelloApplication</mainClass>-->
<!--                        </manifest>-->
<!--                    </archive>-->
<!--                    <outputDirectory>${project.build.directory}/install</outputDirectory>-->
<!--                </configuration>-->
<!--            </plugin>-->
        </plugins>
    </build>
</project>